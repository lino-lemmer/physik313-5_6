#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import jinja2
import math
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

def skizze_d(T):
    f = np.linspace(1, 1e4, 1e4)
    v = np.sqrt(1 + 4 * np.pi**2 * 100e3**2 * 100e-9**2 * f**2)

    pl.loglog(f, v)
    pl.xlabel(r"$f$/ Hz")
    pl.ylabel(r"$v$")
    pl.grid(True)
    pl.savefig("5_6-D.pdf")
    pl.clf

def g(value, error=None, digits=3):
    if error is None:
        return ("{:."+str(digits)+"g}").format(value)
    else:
        value_log = int(math.floor(math.log(np.abs(value), 10)))
        error_log = int(math.floor(math.log(np.abs(error), 10)))

        difference = value_log - error_log
        exp = 0

        if difference >= 0:
            value_dis = value * 10**(difference - value_log)
            error_dis = error * 10**(- error_log)
            exp = error_log
        else:
            value_dis = value * 10**(- value_log)
            error_dis = error * 10**(difference - error_log)
            exp = value_log

        format_string = "{:."+str(digits-1)+"f} +- {:."+str(digits-1)+"f} e{:+d}"
        return format_string.format(value_dis, error_dis, exp)

def render_template(T):
    # Setting up Jinja
    env = jinja2.Environment(
        "%<", ">%",
        "<<", ">>",
        "%§", "§%",
        loader=jinja2.FileSystemLoader(".")
    )
    template3 = env.get_template("Template_5.tex")

    # Rendering LaTeX document with values.
    with open("physik313-5-Ueding_Lemmer.tex", "w") as f:
        f.write(template3.render(**T))

def main():
    T = {}

    skizze_d(T)
    render_template(T)

if __name__ == "__main__":
    main()
